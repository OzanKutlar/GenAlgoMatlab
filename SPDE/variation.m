% Perform genetic operations (crossover and mutation) on the individuals in the mating pool
%
% INPUT: 
% 'pop' is the population to be evaluated
% 'matPool' is the indices of the individuals from 'pop' allowed to reproduce 
%
% OUTPUT: 
% 'offspring' is the population of offspring generated by genetic operations 
function [offspring] = variation(pop, matPool)

% DE/current-to-rand/1 method

global op;  % optimization problem
global gas; % genetic algorithm settings

% declare a static array of chromosomes filled with zeros
offspring = zeros(gas.n_individuals, op.numberOfDecisionVar);

matPool = matPool(randperm(length(matPool))); % shuffle the mating pool

F = 0.85;

for i=1:gas.n_individuals

    %% Mutation
    Candidates = [1:i-1 i+1:gas.n_individuals];    % Ensuring that current member is not partner
    idx = Candidates(randperm(gas.n_individuals - 1, 3)); % Selection of three random partners
    X1 = pop(idx(1), :);              % Randomly selected solution 1
    X2 = pop(idx(2), :);              % Randomly selected solution 2
    X3 = pop(idx(3), :);              % Randomly selected solution 3

    %% Crossover
    for j = 1:op.numberOfDecisionVar
        offspring(i, j) = max(min(pop(i, j) + 1 * (X3(j) - pop(i, j)) + F * (X1(j) - X2(j)), 1), 0);
    end
    
end
end