% when neighbour is inf summation result in inf
function [pop]=crowding_distance_BBBC(pop)
    global bbbcs;
    w=1;
    sz=size(pop,1);
    n=size(unique(pop(:,bbbcs.rankIndex)),1);
    pop(:,bbbcs.crowdingDistIndex)=0;

    for i=1:n
      front=[];
      for j=1:sz
          if pop(j,bbbcs.rankIndex)==i
              front=[front; pop(j,:)];
          end 
      end
      l=size(front,1);
      
      if l==1
          front(end,bbbcs.crowdingDistIndex)=inf;
      end
      
      %obj1 (index1)
      front=[front (1:size(front, 1))'];
      sortedFront=[sortrows(front,3)];
      
      sortedFront(1,bbbcs.crowdingDistIndex)=inf;
      sortedFront(end,bbbcs.crowdingDistIndex)=inf;
%       for m=2:l-1
%         sortedFront(m,bbbcs.crowdingDistIndex)= (sortedFront(m,bbbcs.crowdingDistIndex)+ (sortedFront(m+1,3)-sortedFront(m-1,3))/(max(pop(:,3))-min(pop(:,3))));
%       end 
%       
%       sortedFront=[sortrows(sortedFront,size(sortedFront,2))];
%       front=sortedFront(:,1:end-1);
% 
%       %obj2 (index10)
%       front=[front (1:size(front, 1))'];
%       sortedFront=[sortrows(front,4)];
%       
%       sortedFront(1,bbbcs.crowdingDistIndex)=inf;
%       sortedFront(end,bbbcs.crowdingDistIndex)=inf;
%       for m=2:l-1
%         sortedFront(m,bbbcs.crowdingDistIndex)= (sortedFront(m,bbbcs.crowdingDistIndex)+ (sortedFront(m+1,4)-sortedFront(m-1,4))/(max(pop(:,4))-min(pop(:,4))));
%       end 
%       
%       sortedFront=[sortrows(sortedFront,size(sortedFront,2))];
%       front=sortedFront(:,1:end-1);
       
        
      pop(w:w+l-1,bbbcs.crowdingDistIndex)=front(:,bbbcs.crowdingDistIndex);
      w=w+l;
    end

end  
   
