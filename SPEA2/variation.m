% Perform genetic operations (crossover and mutation) on the individuals in the mating pool
%
% INPUT: 
% 'pop' is the population to be evaluated
% 'matPool' is the indices of the individuals from 'pop' allowed to reproduce 
%
% OUTPUT: 
% 'offspring' is the population of offspring generated by genetic operations 
function [offspring] = variation(pop, matPool)

    global op;  % optimization problem
    global gas; % genetic algorithm settings

    % declare a static array of chromosomes filled with zeros
    offspring = zeros(gas.n_individuals,op.numberOfDecisionVar);
    
    % shuffle the mating pool
    matPool = matPool(randperm(length(matPool))); 
    
    % this cannot be parallelized (or can it?) (*vsauce theme plays*)
    for i=1:2:gas.n_archive
        % crossover
        index_p1 = matPool(i);
        index_p2 = matPool(i+1);

        p1 = pop(index_p1,:);
        p2 = pop(index_p2,:);

        [o1, o2] = crossover(p1, p2);   

        % mutation
        o1 = mutation(o1);
        o2 = mutation(o2);

        offspring(i,:) = o1;
        offspring(i+1,:) = o2;
    end
end