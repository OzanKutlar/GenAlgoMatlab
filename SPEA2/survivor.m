% Perform survivor operation which create a new generation from the best 
% individuals from current population and offspring
%
% INPUT: 
% 'pop_archive' is the population of elites to be evaluated 
% 'offspring' is the population of offspring generated by genetic operations 
% 'fit_array_archive' is containing the fitness of each individual in the population of elites and the index of the individual in the array 'pop_archive'
% 'fit_array_O' is containing the fitness of each individual in the population and the index of the individual in the array 'offspring'
%
% OUTPUT: 
% 'nextGenPop_final' is the population of the next generation 
% 'fit_array_NGP_Final' is containing the fitness of each individual in the next generation population and the index of the individual in the array 'nextGenPop'
function [nextGenPop_final, fit_array_NGP_Final] = survivor(pop_archive, offspring, fit_array_archive, fit_array_O)
    
    global op;  % optimization problem
    global gas; % genetic algorithm settings
    
    switch gas.survival_method
        case 'non-elitist'
            nextGenPop = pop;
            fit_array_NGP = fit_array_O;    % not much more to do here...
        case 'elitist_full'
            [nextGenPop_final, fit_array_NGP_Final] = elitistSurvivalFull(pop_archive, offspring, fit_array_archive, fit_array_O);
        case 'elitist_alpha'
            [nextGenPop, fit_array_NGP] = elitistSurvivalAlpha(pop, offspring, fit_array_P, fit_array_O);
        otherwise
            error('Unexpected Survival Method.');
    end
    
end

%--------------ELITIST SURVIVAL, (MU+LAMBDA)-SCHEME --------------

%IMPORTANT: first merge both populations 'pop' and 'offspring', then it recalculate their rank (rank only makes sense within a population)
function [nextGenPop_final, fit_array_NGP_Final] = elitistSurvivalFull(pop_archive, offspring, fit_array_archive, fit_array_O)
    global op;  % optimization problem
    global gas; % genetic algorithm settings
    global MOO_Method;

    % declare a static array of chromosomes filled with zeros
    nextGenPop = zeros(gas.n_archive,op.numberOfDecisionVar);   

    % array containing fitness for each individual of the new population
    fit_array_NGP = zeros(gas.n_individuals*2,gas.fitArraySize);   
    
    %copy all individuals from pop_archive and offspring into nextGenPop
    nextGenPop(1:gas.n_archive,:) = pop_archive; 
    nextGenPop(gas.n_archive+1:gas.n_individuals*2,:) = offspring;
    
    fit_array_O(:,gas.solutionIndex) = fit_array_O(:,gas.solutionIndex) + gas.n_archive;

    % copy fit arrays from fit_array_archive and fit_array_O into
    %fit_array_NGP
    fit_array_NGP(1:gas.n_archive,:) = fit_array_archive;
    fit_array_NGP(gas.n_archive+1:gas.n_individuals*2,:) = fit_array_O;
    
    % Evaluate the merged population
    fit_array_NGP = SPEA_Strength(fit_array_NGP);
    fit_array_NGP = SPEA_Raw_Fitness(fit_array_NGP);
    [fit_array_NGP] = SPEA_Density(fit_array_NGP);
    fit_array_NGP(:,gas.lastFitnessIndex) = fit_array_NGP(:,gas.rawFitnessIndex) + fit_array_NGP(:,gas.densityIndex);
    
    % Non-Elite Removal from Archive 
    fit_array_NGP = sortrows(fit_array_NGP,gas.lastFitnessIndex,"ascend");
    fit_array_NGP_Final = zeros(gas.n_archive,gas.fitArraySize);
    fit_array_NGP_Final = fit_array_NGP(fit_array_NGP(:,gas.lastFitnessIndex) < 1, :);
    [fit_array_NGP_Final] = Survival_SPEA2(fit_array_NGP_Final, fit_array_NGP);

    nextGenPop_final = zeros(gas.n_archive,2);
    for i = 1:gas.n_archive
        for j = 1:op.numberOfDecisionVar
            nextGenPop_final(i,j) = nextGenPop(fit_array_NGP_Final(i,gas.solutionIndex),j);
        end
    end
    for i=1:gas.n_archive
        fit_array_NGP_Final(i,gas.solutionIndex)=i;  % update the indices
    end
end

%--------------DYNAMIC SURVIVAL, ALPHA-SCHEME --------------
% IMPORTANT: it is not necessary to recalculate the rank as in the previous method, simply take the best alpha% from 'pop' and the best (1-alpha)%
% from 'offspring'. Useful if alpha changes dynamically as the generations proceed (starting with alpha = 0%) to gradually introduce elites in the new population
function [nextGenPop, fit_array_NGP] = dynamicSurvival(pop, offspring, fit_array_P, fit_array_O, alpha)
    global op;  % optimization problem
    global gas; % genetic algorithm settings
    error('This Survival Method is not implemented yet.');
end

